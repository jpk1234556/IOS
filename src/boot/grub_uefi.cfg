# grub_uefi.cfg - Brandon Media OS UEFI GRUB Configuration
# Cyberpunk Neural Boot Interface

# Set timeout and default
set timeout=5
set default=0

# Configure GRUB appearance for cyberpunk theme
set color_normal=cyan/black
set color_highlight=white/blue

# Check if we're booting in UEFI mode
if [ "${grub_platform}" == "efi" ]; then
    echo "UEFI Neural Boot Mode Detected"
    set uefi_mode=1
else
    echo "Legacy BIOS Boot Mode Detected"
    set uefi_mode=0
fi

# Main menu entries
menuentry "Brandon Media OS - Neural UEFI Boot" {
    echo "Loading Brandon Media OS in Neural UEFI Mode..."
    echo "Initializing cyberpunk secure boot..."
    
    if [ "${grub_platform}" == "efi" ]; then
        echo "UEFI neural interface active"
        # Load kernel with UEFI support
        linux /boot/kernel.elf neural_boot=uefi secure_boot=enabled cyberpunk_level=10
    else
        echo "Falling back to legacy multiboot"
        multiboot /boot/kernel.elf neural_boot=legacy
    fi
    
    echo "Transferring control to neural matrix..."
    boot
}

menuentry "Brandon Media OS - Legacy Multiboot" {
    echo "Loading Brandon Media OS in Legacy Mode..."
    echo "Initializing standard multiboot interface..."
    
    multiboot /boot/kernel.elf neural_boot=legacy
    echo "Booting legacy neural interface..."
    boot
}

menuentry "Brandon Media OS - Safe Mode" {
    echo "Loading Brandon Media OS in Safe Mode..."
    echo "Minimal neural interface initialization..."
    
    if [ "${grub_platform}" == "efi" ]; then
        linux /boot/kernel.elf neural_boot=safe secure_boot=disabled debug=1
    else
        multiboot /boot/kernel.elf neural_boot=safe debug=1
    fi
    
    echo "Booting safe neural mode..."
    boot
}

menuentry "Neural Diagnostics Mode" {
    echo "Loading Neural Diagnostics Interface..."
    echo "Initializing comprehensive system analysis..."
    
    if [ "${grub_platform}" == "efi" ]; then
        linux /boot/kernel.elf neural_boot=diagnostics cyberpunk_level=5 verbose=1
    else
        multiboot /boot/kernel.elf neural_boot=diagnostics verbose=1
    fi
    
    echo "Starting neural diagnostics..."
    boot
}

menuentry "Cyberpunk Maximum Security Boot" {
    echo "Loading Maximum Security Neural Interface..."
    echo "Activating all cyberpunk security protocols..."
    
    if [ "${grub_platform}" == "efi" ]; then
        linux /boot/kernel.elf neural_boot=uefi secure_boot=maximum cyberpunk_level=15 security=max
    else
        echo "Maximum security mode requires UEFI"
        echo "Please use UEFI boot method"
        sleep 3
        configfile ${prefix}/grub.cfg
    fi
    
    echo "Initializing maximum security neural matrix..."
    boot
}

# Advanced boot options submenu
submenu "Advanced Neural Boot Options" {
    menuentry "Neural Matrix Debug Mode" {
        echo "Loading Neural Matrix Debug Interface..."
        
        if [ "${grub_platform}" == "efi" ]; then
            linux /boot/kernel.elf neural_boot=uefi debug=neural matrix_debug=1
        else
            multiboot /boot/kernel.elf neural_boot=legacy debug=neural matrix_debug=1
        fi
        
        boot
    }
    
    menuentry "Cyberpunk Developer Mode" {
        echo "Loading Cyberpunk Developer Interface..."
        
        if [ "${grub_platform}" == "efi" ]; then
            linux /boot/kernel.elf neural_boot=uefi developer=1 cyberpunk_level=8
        else
            multiboot /boot/kernel.elf neural_boot=legacy developer=1
        fi
        
        boot
    }
    
    menuentry "Neural Network Boot Test" {
        echo "Loading Neural Network Boot Test..."
        
        if [ "${grub_platform}" == "efi" ]; then
            linux /boot/kernel.elf neural_boot=uefi network_test=1 virtio_test=1
        else
            multiboot /boot/kernel.elf neural_boot=legacy network_test=1
        fi
        
        boot
    }
    
    menuentry "Return to Main Menu" {
        configfile ${prefix}/grub.cfg
    }
}

# System utilities submenu
submenu "Neural System Utilities" {
    menuentry "Memory Test" {
        echo "Starting Neural Memory Diagnostics..."
        # In a real implementation, this would load memtest86+
        echo "Memory test not implemented yet"
        sleep 2
    }
    
    menuentry "Hardware Detection" {
        echo "Starting Neural Hardware Detection..."
        
        if [ "${grub_platform}" == "efi" ]; then
            linux /boot/kernel.elf neural_boot=uefi hardware_detect=1 pci_scan=verbose
        else
            multiboot /boot/kernel.elf neural_boot=legacy hardware_detect=1 pci_scan=verbose
        fi
        
        boot
    }
    
    menuentry "Firmware Information" {
        echo "Displaying Neural Firmware Information..."
        echo "GRUB Version: ${grub_version}"
        echo "Platform: ${grub_platform}"
        echo "CPU: ${grub_cpu}"
        
        if [ "${grub_platform}" == "efi" ]; then
            echo "UEFI Firmware Detected"
            echo "Secure Boot: Checking..."
        else
            echo "Legacy BIOS Detected"
        fi
        
        echo "Press any key to continue..."
        read
    }
    
    menuentry "Return to Main Menu" {
        configfile ${prefix}/grub.cfg
    }
}

# Footer message
echo "Brandon Media OS Neural Boot Interface Ready"
echo "Select boot option or wait for automatic boot..."

# Auto-detect and display boot mode
if [ "${grub_platform}" == "efi" ]; then
    echo ">>> UEFI NEURAL BOOT MODE ACTIVE <<<"
else
    echo ">>> LEGACY BIOS BOOT MODE ACTIVE <<<"
fi